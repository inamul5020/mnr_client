# Multi-stage build for Coolify deployment - Robust version
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies and tools
RUN apk add --no-cache git python3 make g++

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies with verbose output
RUN npm ci --no-audit --no-fund --verbose

# Copy source code
COPY . .

# Set environment variables for build
ENV NODE_ENV=production
ENV VITE_API_URL=https://api.mnrlk.com

# Debug: Show what we have
RUN echo "=== Build Environment ===" && \
    node --version && \
    npm --version && \
    ls -la && \
    echo "=== Package.json ===" && \
    cat package.json && \
    echo "=== Dependencies ===" && \
    npm list --depth=0

# Build the application with verbose output
RUN npm run build --verbose

# Verify build output
RUN echo "=== Build Output ===" && \
    ls -la dist/ && \
    echo "=== Index.html ===" && \
    head -20 dist/index.html

# Production stage
FROM nginx:alpine

# Install wget for health checks
RUN apk add --no-cache wget

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.simple.conf /etc/nginx/nginx.conf

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to nginx user
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

CMD ["nginx", "-g", "daemon off;"]
